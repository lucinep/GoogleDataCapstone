# Install required packages
install.packages("tidyverse")  ### For data import and wrangling
install.packages("lubridate")  ### For date functions
install.packages("ggplot2")    ### For visualization
install.packages(“janitor”) #### For data cleanup

## Load the libraries
library(tidyverse)
library(lubridate)
library(ggplot2)
library(janitor)

# Data collection
## Upload Divvy datasets (csv files). Note that because I am using the free version of R PositCloud, I am limited in the amount of RAM I can use; hence why I have limited this analysis to a sample size of 500 per dataframe
q2_2019 <- read_csv("Divvy_Trips_2019_Q2.csv") %>% sample_n(500)
q3_2019 <- read_csv("Divvy_Trips_2019_Q3.csv") %>% sample_n(500)
q4_2019 <- read_csv("Divvy_Trips_2019_Q4.csv") %>% sample_n(500)
q1_2020 <- read_csv("Divvy_Trips_2020_Q1.csv") %>% sample_n(500)

## Compare the column names of each file
colnames(q3_2019)
colnames(q4_2019)
colnames(q2_2019)
colnames(q1_2020)

## Rename the column names to match the format of the q1_2020 dataframe
(q4_2019 <- rename(q4_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q3_2019 <- rename(q3_2019
                   ,ride_id = trip_id
                   ,rideable_type = bikeid 
                   ,started_at = start_time  
                   ,ended_at = end_time  
                   ,start_station_name = from_station_name 
                   ,start_station_id = from_station_id 
                   ,end_station_name = to_station_name 
                   ,end_station_id = to_station_id 
                   ,member_casual = usertype))

(q2_2019 <- rename(q2_2019
                   ,ride_id = "01 - Rental Details Rental ID"
                   ,rideable_type = "01 - Rental Details Bike ID" 
                   ,started_at = "01 - Rental Details Local Start Time"  
                   ,ended_at = "01 - Rental Details Local End Time"  
                   ,start_station_name = "03 - Rental Start Station Name" 
                   ,start_station_id = "03 - Rental Start Station ID"
                   ,end_station_name = "02 - Rental End Station Name" 
                   ,end_station_id = "02 - Rental End Station ID"
                   ,member_casual = "User Type"))

## Inspect the dataframes and look for any discrepancies
str(q1_2020)
str(q4_2019)
str(q3_2019)
str(q2_2019)

## Convert ride_id and rideable_type to character so that they can stack correctly
q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 

## Double check for any column mismatches
compare_df_cols(q1_2020, q2_2019, q3_2019, q4_2019)

## Now that we are sure there are no column discrepancies, we can stack each quarter's data frame into one big data frame
all_trips <- bind_rows(q2_2019, q3_2019, q4_2019, q1_2020)

# Notice that the columns lat, long, birthyear and gender were removed in 2020. Update the remaining dataframes to match
all_trips <- all_trips %>%  
  select(-c(start_lat, start_lng, end_lat, end_lng, birthyear, gender, "01 - Rental Details Duration In Seconds Uncapped", "05 - Member Details Member Birthday Year", "Member Gender", "tripduration"))

# Data cleanup
## Review the new dataframe for an overall understanding of what we're working with
colnames(all_trips)  #List of column names
nrow(all_trips)  #Number of rows in data frame
dim(all_trips)  #Dimensions of the data frame
head(all_trips)  #See the first 6 rows of data frame...
tail(all_trips) #...and the last 6 rows!
str(all_trips)  #See list of columns and data types (numeric, character, etc)
summary(all_trips)  #Statistical summary of data

## Based on the results above, it looks like there are a few things we need to fix.
### 1. Consolidate the four member types in the "member_casual" column (member, casual, subscriber, customer) into just two types (member, casual)
### 2. Aggregate the data to dive into the date, day of week, month, and year for further data analysis
### 3. Unlike the rest of the dataframes, q1_2020 is missing a "tripduration" column. Since we've combined the dataframes into all_trips, we can create a new column that measures the trip duration in a column we'll title "ride_length"
### 4. Looks like there are negative entries for "tripduration", as well as instances of bikes being removed from circulation for quality control. We will remove these rows.

## Consolidate the four member types into two types
### First, let's see how many instances we have of each member type:
table(all_trips$member_casual)

### Now, let's reassign values to the two options we want:
all_trips <-  all_trips %>% 
  mutate(member_casual = recode(member_casual
                           ,"Subscriber" = "member"
                           ,"Customer" = "casual"))

### Double-check to make sure the values were reassigned
table(all_trips$member_casual)

## Aggregate calendar data by creating columns for date, day 
all_trips$date <- as.Date(all_trips$started_at) #The default format is yyyy-mm-dd
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

### Add a "ride_length" calculation to all_trips (in seconds)
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)

### Inspect the structure of the columns
str(all_trips)

### Convert "ride_length" from Factor to numeric so we can run calculations on the data
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
is.numeric(all_trips$ride_length

## Remove "bad" data
### Since we will be removing data from when the bike were taken out of the docks for quality control checks, or when ride_length was negative, we'll create a new version of the dataframe

all_trips_v2 <- all_trips[!(all_trips$start_station_name == "HQ QR" | all_trips$ride_length<0),]

# Descriptive analysis

mean(all_trips_v2$ride_length) #### average ride length (total ride length / rides)
median(all_trips_v2$ride_length) #### midpoint number in the ascending array of ride lengths
max(all_trips_v2$ride_length) ### longest ride
min(all_trips_v2$ride_length) #### shortest ride

# You can condense the four lines above to one line using summary() on the specific attribute
summary(all_trips_v2$ride_length)

# Compare members and casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = mean)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = median)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = max)
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual, FUN = min)

# See the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Notice that the days of the week are out of order. Let's fix that.
all_trips_v2$day_of_week <- ordered(all_trips_v2$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))

# Now, let's run the average ride time by each day for members vs casual users
aggregate(all_trips_v2$ride_length ~ all_trips_v2$member_casual + all_trips_v2$day_of_week, FUN = mean)

# Analyze ridership data by type and weekday
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by usertype and weekday
  summarise(number_of_rides = n()							#calculates the number of rides and average duration 
  ,average_duration = mean(ride_length)) %>% 		# calculates the average duration
  arrange(member_casual, weekday)								# sorts
         
# Visualization
## Let's visualize the number of rides by rider type
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  geom_col(position = "dodge")

## Let's create a visualization for average duration
all_trips_v2 %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")
